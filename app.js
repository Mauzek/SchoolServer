require("dotenv").config();
const cookieParser = require("cookie-parser");
const express = require("express");
const cors = require("cors");
const morgan = require("morgan");
const apiRouter = require("./routers/apiRouter");
const { sequelize, connectDB } = require("./database/db");
const { 
  User, 
  Role, 
  Parent, 
  Student,
  Employee,
  Position,
  Class,
  Subject,
  Schedule,
  Grade,
  Assignment,
  Testing
} = require("./models");

const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ middleware
app.use(cors({
  origin: process.env.CLIENT_URL || 'http://localhost:3000',
  credentials: true
}));
app.use(cookieParser());
app.use(express.json());
app.use(morgan("combined"));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get("/", (req, res) => {
  res.send("–°–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã v1.0");
});

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.use("/api/v1", apiRouter);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404
app.use((req, res, next) => {
  res.status(404).json({ error: "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
});

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", err);
  res.status(err.status || 500).json({
    error: err.message || "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await connectDB();
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
    if (process.env.NODE_ENV === 'development') {
      await sequelize.sync({ alter: true });
      console.log("‚ö†Ô∏è –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
    } else {
      await sequelize.authenticate();
      console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ");
    }

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    const server = app.listen(process.env.PORT || 3000, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${process.env.PORT || 3000}`);
    });

    // –ì—Ä–µ–π—Å—Ñ—É–ª —à–∞—Ç–¥–∞—É–Ω
    process.on('SIGINT', async () => {
      console.log("‚è≥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
      await sequelize.close();
      server.close(() => {
        console.log("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        process.exit(0);
      });
    });

  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    process.exit(1);
  }
};

startServer();